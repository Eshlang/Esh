seg param
    dp var _0 "fr" #scope:line
    dp param _1 "fr" #type:var
    dp var _2 "_rvp_hell" #scope:line
    dp param _3 "_rvp_hell"
    dp var _4 "_rvp_add" #scope:line
    dp param _5 "_rvp_add"
    dp var _6 "_rvl_wowvar" #scope:line
    dp var _7 "_xl0" #scope:line
    dp num _8 6
    dp num _9 3
    dp var _10 "_xl1" #scope:line
    dp num _11 4
    dp var _12 "_xl2" #scope:line
    dp num _13 1
    dp num _14 2
    dp var _15 "_xl3" #scope:line
    dp num _16 5
    dp var _17 "_xl4" #scope:line
    dp num _18 123
    dp var _19 "_rvl_testvar" #scope:line
    dp num _20 999
    dp str _21 "aa"
    dp num _22 152
    dp num _23 17
    dp num _24 888
    dp str _25 "g"
    dp str _26 "wow"
    dp str _27 "hello"
    dp str _28 "hey"
    dp str _29 "whaaat"
    dp num _30 15
    dp num _31 10
    dp var _32 "_rvp_pl" #scope:line
    dp param _33 "_rvp_pl"
    dp var _34 "_rvl_hey" #scope:line
    dp num _35 0
    dp var _36 "self_struct" #scope:line
    dp param _37 "self_struct" #type:var
    dp var _38 "_c_void" #scope:global
    dp str _39 "wowwww"
seg func
    df _40 "__2#main.yo.hello"
    df _41 "__4#main.yo.hey.blablabla"
    df _42 "__5#main.yo.wtf"
    df _43 "__7#main.yo.Player.hello"
    df _44 "__9#main.randomfunc"
seg code
    func _40 _1, _3, _5
        var add _7, _9, _8
        var add _12, _14, _13
        var mul _10, _12, _11
        var add _6, _10, _7
        varif lower _4, _9
            var set _12, 1
        else
            var set _12, 0
        endif
        varif eq _6, _16
            var set _15, 1
        else
            var set _15, 0
        endif
        var bitwise _10, _15, _12 #operator:and
        varif eq _6, _11
            var set _17, 1
        else
            var set _17, 0
        endif
        var bitwise _7, _17, _10 #operator:or
        varif eq _7, 1
            var set _4, _18
            var set _19, _16
            var add _19, _19, _20
            var repeatstring _0, _21, _19
            ctrl return
        else
            var mul _7, _4, _22
            var add _6, _6, _7
        endif
        var set _19, _23
        var add _19, _19, _24
        var add _6, _6, _4
        var repeatstring _0, _25, _6
        ctrl return
    func _41 _3, _5
        var set _6, _26
        var string _6, _6, _2
        var string _15, _29, _28
        var set _17, _30
        call _40 _12, _15, _17
        var string _10, _28, _12
        var set _12, _31
        call _40 _7, _10, _12
        var string _6, _7, _27
    func _42 _1, _33
        var set _7, _27
        var set _10, _35
        var set _15, _35
        var createlist _12, _15
        var createlist _34, _7, _10, _12
        var set _10, _32
        var getlistvalue _10, _10, 3
        var getlistvalue _10, _10, 1
        var add _7, _10, _31
        var getlistvalue _10, _34, 3
        var setlistvalue _10, 1, _7
        var setlistvalue _34, 3, _10
        rep forever
            var set _10, _34
            var getlistvalue _10, _10, 2
            varif lower _10, _31
                var set _7, 1
            else
                var set _7, 0
            endif
            varif eq _7, 1
                ctrl stoprepeat
            endif
            var set _10, _34
            var getlistvalue _10, _10, 2
            var add _7, _10, _13
            var setlistvalue _34, 2, _7
        endrep
        var set _0, _34
        var getlistvalue _0, _0, 3
        ctrl return
    func _43 _37, _1
        var set _0, _28
        ctrl return
    func _44 _3, _5
        var set _6, _26
        var string _6, _6, _2
        var set _7, _39
        var set _10, _28
        call _41 _7, _10
        var set _7, _28
        var set _10, _16
        call _40 _6, _7, _10