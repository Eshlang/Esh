player[] queue = [];
board[] board;
event player join(Player player){
  if(queue.length >= 2) {
    player.sendmessage("A game is already in progress!");
    player.kick();
  }
  queue.append(player);
  if(queue.length == 2) {
    board = new Board(queue);
    board.startGame();
  } else {
    player.sendmessage("Waiting for a second player...");
  }
}
event player rightclick(Player player, Location loc){
  /*
  implementation for right clicking on the tic tac toe square, not sure how locations will be handled other than just putting the plot coords which will kinda suck since you need to be on df to get those and keep tabbing back out idk
  */
  board.makeMove(player, i); //i is the index of the square played
}
class board{
  list players;
  num currentPlayer = 0;
  list state = [0, 0, 0, 0, 0, 0, 0, 0, 0];
  event instance(List players){ 
    this.players = players.shuffle(); //not sure if this works well but this feels like the intuitive way to handle assigning a list to a shuffled list
  }
  func startGame(){ //I feel like scoping functions (ie public/private) doesnt really make sense for this
    select.allplayers.sendmessage("Game starting!"); //need better syntax to select all players
    control.wait(20);
    players.get(currentPlayer).sendMessage("Your turn!"); //list.get() fits better with the rest of the syntax but we might add list[] as a shorthand
  }
  func makeMove(Player player, num i){
    if(players.get(currentPlayer) != player || state[i] != 0) return;
    state[i] = currentPlayer + 1;
    //check for win code, i dont want to implement rn Lmao
    currentPlayer = 1 - currentPlayer;
    control.wait(20);
    players.get(currentPlayer).sendMessage("Your turn!");
  }
}