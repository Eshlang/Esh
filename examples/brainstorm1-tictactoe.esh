Player[] queue;
Board gameBoard;

event Plot Start() {
    queue = [];
}

event Player Join(Player player) {
    if(queue.length >= 2) {
        player.sendMessage("A game is already in progress!");
        player.kick();
    }
    queue.append(player);
    if(queue.length == 2) {
        gameBoard = Board(queue);
        gameBoard.startGame();
    } else {
        player.sendMessage("Waiting for a second player...");
    }
}

event Player RightClick(Player player, vector3 loc) {
    if(!loc.between(<5, 50, 5>, <7, 50, 7>)) return;
    int xOffset = loc.x - 5;
    int yOffset = loc.y - 5;
    int i = xOffset % 3 + yOffset * 3;
    gameBoard.makeMove(event.player, i); 
}

event Broadcast(string message) {
    Plot.players.foreach(player => player.sendMessage(message));
}

event GameEnd() {
    Plot.players.foreach(player => player.kick());
}

class Board {
    Player[] players;
    int currentPlayer = 0;
    int[] state = [0, 0, 0, 0, 0, 0, 0, 0, 0];

    event Instance(Player[] players) { 
        this.players = players.shuffle(); 
    }

    func startGame() { 
        call Broadcast("Game starting!"); 
        wait 20;
        players[currentPlayer].sendMessage("Your turn!"); 
    }

    func makeMove(Player player, int i) {
        if(players[currentPlayer] != player || state[i] != 0) return;
        state[i] = player + 1;
        if(checkForEnd()) {
            call GameEnd();
            return;
        }
        currentPlayer = 1 - currentPlayer;
        wait 20;
        players[currentPlayer].sendMessage("Your turn!");
    }

    private func checkForEnd() -> bool {
        for(int player = 1; player <= 2; player++){
            bool win = state[0] == player && state[1] == player && state[2] == player 
                    || state[3] == player && state[4] == player && state[5] == player
                    || state[6] == player && state[7] == player && state[8] == player
                    || state[0] == player && state[3] == player && state[6] == player
                    || state[1] == player && state[4] == player && state[7] == player
                    || state[2] == player && state[5] == player && state[8] == player
                    || state[0] == player && state[4] == player && state[8] == player
                    || state[2] == player && state[4] == player && state[6] == player;
            if(win) {
                call Broadcast(players[player - 1].name + " Won!");
                return true;
            }
        }
        if(state.all(tile => tile != 0))
        {
            call Broadcast("Tie!");
            return true;
        }
    }
}